import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from collections import deque
from typing import NamedTuple

sensor_dict = {
    '0.1': [(0, 1664.0)],
    '0.3': [(0, 2285.0), (1, 449.0)],
    '0.5': [(0, 1839.0), (1, 449.0)],
    '0.6': [(0, 2182.0), (1, 451.0),
            (2, '0.178,0.595,0.762,0.2,0.1,0.3,0.156,1.487,1.81,0.26')],
    '0.8': [(0, 2225.0),
            (2, '0.185,0.585,0.746,0.0,0.2,0.0,0.156,1.486,1.82,0.27')],
    '0.9': [(0, 1959.0), (1, 449.0)],
    '1.0': [(0, 2765.0), (1, 447.0),
            (2, '0.190,0.590,0.750,0.2,0.1,0.3,0.156,1.487,1.80,0.27')],
    '1.2': [(0, 1543.0), (1, 449.0)],
    '1.3': [(0, 1669.0), (1, 447.0),
            (2, '0.200,0.589,0.766,0.1,0.4,0.0,0.156,1.486,1.82,0.27')],
    '1.5': [(0, 1555.0),
            (2, '0.180,0.589,0.761,0.2,0.1,0.0,0.157,1.486,1.81,0.26')],
    '1.7': [(0, 1755.0),
            (2, '0.191,0.603,0.746,0.0,0.3,0.2,0.156,1.486,1.82,0.26')],
    '1.8': [(0, 1958.0), (1, 450.0)],
    '2.0': [(0, 1913.0), (1, 448.0)],
    '2.2': [(0, 1976.0),
            (2, '0.179,0.594,0.761,0.0,0.0,0.1,0.157,1.487,1.81,0.26')],
    '2.3': [(0, 1953.0), (1, 448.0)],
    '2.5': [(0, 1668.0), (1, 450.0)],
    '2.8': [(0, 2073.0), (3, 0)],
    '3.0': [(0, 1581.0), (1, 450.0), (3, 0)],
    '3.3': [(0, 1996.0),
            (2, '0.201,0.589,0.758,0.1,0.2,0.0,0.157,1.486,1.81,0.26'), (3, 0)],
    '3.4': [(0, 1719.0), (1, 450.0), (3, 0)],
    '3.5': [(0, 1711.0), (1, 450.0),
            (2, '0.184,0.590,0.757,0.1,0.1,0.2,0.157,1.485,1.81,0.26')],
    '3.7': [(0, 1914.0), (1, 451.0), (3, 0)],
    '3.8': [(0, 2031.0), (1, 451.0),
            (2, '0.201,0.601,0.753,0.1,0.1,0.1,0.156,1.487,1.80,0.26'), (3, 0)],
    '4.0': [(0, 1270.0), (3, 0)],
    '4.1': [(0, 1925.0), (1, 450.0),
            (2, '0.189,0.584,0.752,0.0,0.0,0.0,0.156,1.486,1.80,0.26')],
    '4.3': [(0, 2071.0), (1, 452.0), (3, 0)],
    '4.4': [(0, 1911.0), (1, 449.0),
            (2, '0.188,0.606,0.760,0.3,0.2,0.0,0.157,1.487,1.81,0.27'), (3, 0)],
    '4.6': [(0, 1719.0),
            (2, '0.177,0.599,0.748,0.1,0.1,0.1,0.157,1.486,1.82,0.26'), (3, 0)],
    '4.7': [(0, 1761.0), (1, 448.0)],
    '4.9': [(0, 2017.0), (1, 449.0), (3, 0)],
    '5.0': [(0, 2140.0), (1, 447.0),
            (2, '0.186,0.594,0.762,0.0,0.2,0.0,0.157,1.487,1.82,0.27')],
    '5.2': [(0, 1692.0), (1, 447.0), (3, 0)],
    '5.3': [(0, 1511.0), (1, 451.0),
            (2, '0.195,0.589,0.757,0.4,0.2,0.4,0.157,1.488,1.82,0.26')],
    '5.5': [(0, 1923.0), (3, 0)],
    '5.6': [(0, 2150.0), (1, 452.0),
            (2, '0.185,0.604,0.752,0.0,0.0,0.0,0.157,1.485,1.81,0.27'), (3, 0)],
    '5.7': [(0, 2215.0), (1, 450.0),
            (2, '0.191,0.584,0.755,0.2,0.2,0.1,0.156,1.488,1.82,0.26')],
    '5.9': [(0, 1612.0), (1, 450.0), (3, 0)],
    '6.1': [(0, 2693.0),
            (2, '0.187,0.590,0.761,0.1,0.2,0.0,0.157,1.486,1.81,0.27'), (3, 0)],
    '6.2': [(0, 1803.0), (1, 449.0), (3, 0)],
    '6.4': [(0, 1775.0),
            (2, '0.197,0.587,0.761,0.4,0.0,0.0,0.157,1.487,1.82,0.26'), (3, 0)],
    '6.5': [(0, 2160.0), (1, 451.0), (3, 0)],
    '6.7': [(0, 2834.0), (3, 0), (3, 0)],
    '6.8': [(0, 2080.0), (1, 449.0),
            (2, '0.177,0.596,0.755,0.0,0.1,0.2,0.158,1.486,1.81,0.26')],
    '7.0': [(0, 1748.0),
            (2, '0.195,0.586,0.771,0.2,0.1,0.4,0.156,1.486,1.81,0.26')],
    '7.1': [(0, 1406.0), (1, 449.0)],
    '7.2': [(0, 1948.0), (1, 451.0),
            (2, '0.182,0.596,0.757,0.1,0.0,0.2,0.156,1.485,1.81,0.27')],
    '7.4': [(0, 2014.0), (1, 448.0)],
    '7.5': [(0, 1646.0), (1, 450.0),
            (2, '0.193,0.589,0.753,0.2,0.2,0.1,0.157,1.485,1.82,0.26')],
    '7.7': [(0, 2798.0), (1, 450.0)],
    '7.8': [(0, 2001.0), (1, 450.0),
            (2, '0.201,0.598,0.760,0.2,0.1,0.0,0.157,1.487,1.82,0.26')],
    '8.0': [(0, 2445.0), (1, 449.0)],
    '8.2': [(0, 1933.0), (1, 449.0),
            (2, '0.187,0.592,0.752,0.0,0.0,0.3,0.158,1.488,1.82,0.26')],
    '8.3': [(0, 1795.0), (1, 449.0)],
    '8.5': [(0, 2108.0),
            (2, '0.181,0.589,0.775,0.1,0.1,0.2,0.157,1.486,1.81,0.26')],
    '8.6': [(0, 1939.0), (1, 450.0)],
    '8.7': [(0, 1865.0), (1, 452.0),
            (2, '0.203,0.576,0.750,0.2,0.2,0.0,0.157,1.486,1.81,0.26')],
    '8.9': [(0, 1859.0), (1, 450.0)],
    '9.1': [(0, 1887.0),
            (2, '0.186,0.593,0.743,0.1,0.1,0.1,0.157,1.485,1.80,0.26')],
    '9.7': [(0, 1662.0), (0, 1897.0), (0, 308.0), (0, 305.0), (1, 449.0),
            (1, 442.0), (1, 355.0), (1, 141.0),
            (2, '0.190,0.543,0.677,0.3,0.6,0.8,0.165,1.484,1.89,0.26'),
            (2, '-1.98,-1.486,0.496,0.18,0.56,0.26,0.247,1.517,1.26,0.26'),
            (2, '-1.145,0.69,0.72,0.19,0.6,0.4,0.178,1.576,1.163,0.26'),
            (3, 150)],
    '9.9': [(0, 298.0), (1, 23.0), (3, 0)],
    '10.1': [(0, 338.0),
             (2, '0.424,0.362,0.461,0.63,0.5,0.83,0.155,1.111,1.134,0.27')],
    '10.3': [(0, 353.0), (1, 147.0),
             (2, '0.3,0.369,0.727,0.5,0.4,0.0,0.128,1.66,1.165,0.26')],
    '10.4': [(0, 357.0),
             (2, '0.95,0.363,0.986,0.2,0.2,0.0,0.147,1.71,1.158,0.27')],
    '10.5': [(0, 355.0), (1, 148.0),
             (2, '0.92,0.387,0.887,0.2,0.0,0.1,0.143,1.73,1.164,0.26')],
    '10.6': [(0, 355.0), (1, 147.0)],
    '10.7': [(0, 355.0), (1, 148.0),
             (2, '0.99,0.395,0.884,0.3,0.2,0.1,0.143,1.75,1.163,0.27')],
    '10.9': [(0, 356.0), (1, 148.0),
             (2, '0.110,0.387,0.877,0.1,0.1,0.0,0.143,1.74,1.165,0.27')],
    '11.0': [(0, 356.0), (1, 146.0)],
    '11.1': [(0, 355.0), (1, 149.0),
             (2, '0.101,0.394,0.877,0.1,0.3,0.2,0.143,1.74,1.164,0.27')],
    '11.2': [(0, 355.0), (1, 145.0),
             (2, '0.97,0.380,0.880,0.1,0.1,0.0,0.142,1.72,1.165,0.27')],
    '11.4': [(0, 355.0), (1, 149.0),
             (2, '0.115,0.379,0.884,0.1,0.1,0.1,0.144,1.74,1.166,0.26')],
    '11.5': [(0, 358.0), (1, 144.0)],
    '11.6': [(0, 355.0), (1, 147.0),
             (2, '0.107,0.390,0.898,0.0,0.5,0.0,0.143,1.72,1.165,0.26')],
    '11.8': [(0, 358.0),
             (2, '0.117,0.389,0.890,0.1,0.2,0.4,0.143,1.72,1.165,0.26')],
    '11.9': [(0, 355.0), (1, 147.0)],
    '12.0': [(0, 355.0), (1, 147.0),
             (2, '0.100,0.389,0.885,0.0,0.1,0.1,0.145,1.72,1.166,0.27')],
    '12.2': [(0, 356.0),
             (2, '0.117,0.386,0.882,0.0,0.2,0.2,0.144,1.72,1.165,0.27')],
    '12.3': [(0, 357.0), (1, 149.0)],
    '12.4': [(0, 356.0), (1, 147.0),
             (2, '0.115,0.388,0.880,0.1,0.0,0.0,0.144,1.71,1.165,0.26')],
    '12.6': [(0, 356.0),
             (2, '0.92,0.386,0.882,0.0,0.0,0.0,0.147,1.71,1.165,0.26')],
    '12.7': [(0, 355.0), (1, 147.0)],
    '12.8': [(0, 357.0), (1, 148.0),
             (2, '0.117,0.386,0.878,0.0,0.0,0.0,0.146,1.71,1.166,0.26')],
    '12.9': [(0, 355.0), (1, 150.0),
             (2, '0.89,0.373,0.901,0.0,0.0,0.2,0.146,1.70,1.165,0.27')],
    '13.1': [(0, 355.0)],
    '13.2': [(0, 357.0), (1, 148.0),
             (2, '0.110,0.380,0.886,0.0,0.1,0.0,0.145,1.71,1.165,0.26')],
    '13.3': [(0, 356.0), (1, 147.0),
             (2, '0.104,0.383,0.884,0.1,0.1,0.0,0.147,1.69,1.166,0.27')],
    '13.5': [(0, 357.0),
             (2, '0.116,0.382,0.891,0.0,0.0,0.3,0.146,1.69,1.167,0.27')],
    '13.6': [(0, 355.0), (1, 146.0)],
    '13.7': [(0, 357.0), (1, 148.0),
             (2, '0.118,0.383,0.879,0.0,0.1,0.2,0.147,1.70,1.166,0.26')],
    '13.8': [(0, 355.0), (1, 146.0),
             (2, '0.119,0.383,0.887,0.0,0.3,0.1,0.146,1.68,1.165,0.26')],
    '14.0': [(0, 358.0)],
    '14.1': [(0, 356.0), (1, 147.0),
             (2, '0.106,0.395,0.881,0.1,0.1,0.1,0.148,1.67,1.165,0.26')],
    '14.3': [(0, 358.0),
             (2, '0.101,0.389,0.887,0.1,0.1,0.4,0.148,1.68,1.166,0.26')],
    '14.4': [(0, 357.0), (1, 147.0),
             (2, '0.103,0.393,0.881,0.1,0.0,0.0,0.148,1.67,1.165,0.26')],
    '14.5': [(0, 356.0), (1, 147.0),
             (2, '0.111,0.393,0.883,0.0,0.0,0.0,0.148,1.68,1.166,0.27')],
    '14.6': [(0, 356.0), (1, 149.0)],
    '14.7': [(0, 354.0), (1, 148.0),
             (2, '0.111,0.383,0.879,0.0,0.2,0.0,0.149,1.65,1.164,0.27')],
    '14.9': [(0, 355.0), (1, 148.0),
             (2, '0.105,0.391,0.892,0.0,0.2,0.1,0.149,1.69,1.164,0.26')],
    '0.7': [(1, 450.0),
            (2, '0.183,0.589,0.759,0.0,0.1,0.0,0.157,1.486,1.82,0.26')],
    '1.4': [(1, 449.0),
            (2, '0.191,0.602,0.766,0.1,0.2,0.1,0.157,1.486,1.82,0.26')],
    '1.6': [(1, 448.0)],
    '2.1': [(1, 450.0),
            (2, '0.182,0.595,0.754,0.0,0.0,0.3,0.157,1.486,1.81,0.27')],
    '2.7': [(1, 448.0)],
    '3.2': [(1, 448.0)],
    '3.9': [(1, 451.0),
            (2, '0.186,0.593,0.754,0.1,0.0,0.0,0.157,1.487,1.81,0.27')],
    '4.5': [(1, 449.0),
            (2, '0.181,0.592,0.756,0.2,0.1,0.2,0.156,1.486,1.79,0.26')],
    '5.4': [(1, 450.0),
            (2, '0.195,0.598,0.764,0.0,0.0,0.0,0.156,1.486,1.80,0.26'), (3, 0)],
    '6.0': [(1, 451.0),
            (2, '0.188,0.592,0.759,0.1,0.1,0.3,0.157,1.487,1.82,0.27')],
    '6.3': [(1, 452.0),
            (2, '0.172,0.577,0.762,0.2,0.0,0.0,0.156,1.487,1.82,0.26')],
    '6.6': [(1, 450.0),
            (2, '0.195,0.592,0.758,0.1,0.4,0.1,0.156,1.487,1.81,0.26')],
    '6.9': [(1, 448.0),
            (2, '0.197,0.601,0.760,0.3,0.2,0.2,0.157,1.486,1.80,0.26')],
    '8.4': [(1, 449.0),
            (2, '0.194,0.608,0.757,0.2,0.4,0.2,0.157,1.486,1.82,0.26')],
    '9.0': [(1, 448.0),
            (2, '0.182,0.586,0.757,0.0,0.1,0.1,0.156,1.485,1.82,0.26')],
    '10.0': [(1, 125.0),
             (2, '0.80,0.432,1.52,0.135,0.121,0.93,0.162,1.141,1.132,0.27')],
    '10.2': [(1, 145.0),
             (2, '0.12,0.212,0.553,0.107,0.94,0.2,0.177,1.55,1.95,0.26')],
    '11.7': [(1, 147.0),
             (2, '0.110,0.378,0.889,0.1,0.1,0.2,0.142,1.72,1.165,0.27')],
    '12.1': [(1, 146.0),
             (2, '0.115,0.392,0.878,0.1,0.0,0.2,0.144,1.72,1.165,0.26')],
    '12.5': [(1, 145.0),
             (2, '0.116,0.378,0.889,0.2,0.2,0.0,0.144,1.70,1.166,0.26')],
    '13.0': [(1, 147.0),
             (2, '0.107,0.378,0.889,0.1,0.3,0.0,0.146,1.70,1.166,0.26')],
    '13.4': [(1, 149.0),
             (2, '0.112,0.374,0.888,0.2,0.0,0.2,0.146,1.69,1.166,0.26')],
    '13.9': [(1, 149.0),
             (2, '0.101,0.380,0.886,0.2,0.2,0.1,0.147,1.69,1.165,0.26')],
    '14.2': [(1, 146.0),
             (2, '0.125,0.389,0.885,0.0,0.1,0.1,0.148,1.68,1.166,0.26')],
    '15.0': [(1, 146.0)],
    '0.4': [(2, '0.183,0.594,0.759,0.1,0.0,0.0,0.158,1.486,1.80,0.26')],
    '1.1': [(2, '0.180,0.588,0.754,0.1,0.3,0.0,0.157,1.486,1.82,0.26')],
    '1.9': [(2, '0.184,0.587,0.765,0.2,0.1,0.0,0.158,1.487,1.81,0.27')],
    '2.4': [(2, '0.196,0.590,0.750,0.0,0.2,0.0,0.158,1.486,1.81,0.26')],
    '2.6': [(2, '0.192,0.590,0.750,0.0,0.3,0.0,0.159,1.486,1.81,0.26')],
    '2.9': [(2, '0.173,0.592,0.752,0.3,0.2,0.1,0.156,1.485,1.82,0.26')],
    '3.1': [(2, '0.186,0.589,0.749,0.1,0.1,0.3,0.157,1.485,1.81,0.27')],
    '3.6': [(2, '0.181,0.589,0.754,0.0,0.0,0.2,0.158,1.485,1.82,0.26'), (3, 0)],
    '4.2': [(2, '0.192,0.586,0.754,0.3,0.4,0.1,0.156,1.485,1.80,0.27'), (3, 0)],
    '4.8': [(2, '0.192,0.597,0.763,0.1,0.1,0.0,0.157,1.485,1.81,0.26'), (3, 0)],
    '5.1': [(2, '0.181,0.602,0.758,0.3,0.1,0.3,0.158,1.486,1.80,0.26'), (3, 0)],
    '5.8': [(2, '0.182,0.593,0.760,0.0,0.0,0.2,0.156,1.487,1.81,0.26'), (3, 0)],
    '7.3': [(2, '0.195,0.605,0.752,0.1,0.1,0.2,0.157,1.486,1.82,0.26')],
    '7.6': [(2, '0.186,0.591,0.759,0.1,0.2,0.2,0.156,1.486,1.81,0.26')],
    '7.9': [(2, '0.189,0.589,0.749,0.1,0.0,0.1,0.158,1.486,1.81,0.26')],
    '8.1': [(2, '0.191,0.589,0.746,0.1,0.5,0.1,0.156,1.487,1.82,0.26')],
    '8.8': [(2, '0.192,0.604,0.759,0.1,0.3,0.0,0.155,1.486,1.81,0.26')],
    '9.8': [(2, '-1.666,0.543,0.825,0.10,0.141,0.5,0.227,1.503,1.25,0.26')],
    '10.8': [(2, '0.110,0.398,0.882,0.1,0.2,0.0,0.141,1.74,1.165,0.26')],
    '11.3': [(2, '0.116,0.389,0.887,0.1,0.1,0.1,0.141,1.73,1.165,0.27')],
    '14.8': [(2, '0.106,0.387,0.885,0.0,0.2,0.2,0.149,1.68,1.165,0.26')]
}

right_tof_readings = deque([(1664.0, "0.1"), (124.3, "0.3"), (1234.0, "0.4"),
                            (3948.9, "0.2")])
front_tof_readings = deque([(964.0, "0.5"), (532.0, "0.4"), (2145.9, "0.2")])
imu_readings = deque([
    ('0.183,0.594,0.759,0.1,0.0,0.0,0.158,1.486,1.80,0.26', "0.6"),
    ('0.181,0.602,0.758,0.3,0.1,0.3,0.158,1.486,1.80,0.26', "0.5"),
    ('0.110,0.398,0.882,0.1,0.2,0.0,0.141,1.74,1.165,0.26', "0.4"),
    ('0.116,0.389,0.887,0.1,0.1,0.1,0.141,1.73,1.165,0.27', "0.2")
])
speed_readings = deque([(150, "0.6"), (140, "0.4"), (120, "0.1")])


class IMUSensorReading(NamedTuple):
    accX: float
    accY: float
    accZ: float
    gyrX: float
    gyrY: float
    gyrZ: float
    magX: float
    magY: float
    magZ: float
    temp: float


# class SensorReading(NamedTuple):
#     time: float
#     right_tof: float
#     front_tof: float
#     imu: IMUSensorReading
#     speed: int


def decode_imu_data(imu_data: str):
    return IMUSensorReading(*map(float, imu_data.split(',')))


# Returns a deque of IMU sensor reading tuples from the original unformatted data
def decode_imu_deque(dq):
    new_deque = deque(maxlen=dq.maxlen)
    for imu_data, time in dq:
        new_deque.append((decode_imu_data(imu_data), time))
    return new_deque


def log_data():
    # First, generate a set of all the times
    time_set = set()
    combined_sensor_readings = [
        speed_readings, right_tof_readings, front_tof_readings,
        decode_imu_deque(imu_readings)
    ]
    for sensor in combined_sensor_readings:
        for reading in sensor:
            time_set.add(float(reading[1]))

    # Then, sort the set and convert it to a list
    time_arr = np.array(sorted(time_set))
    t_to_i = {time: i for i, time in enumerate(time_arr)}

    # Finally, generate a list of sensor readings for each time
    sensor_arr = np.full((len(time_arr), 14), np.nan)
    sensor_arr[:, 0] = time_arr

    for c, sensor in enumerate(combined_sensor_readings):
        for reading, t in sensor:
            t = float(t)
            if type(reading) == IMUSensorReading:
                sensor_arr[t_to_i[t], c + 1] = reading.accX
                sensor_arr[t_to_i[t], c + 2] = reading.accY
                sensor_arr[t_to_i[t], c + 3] = reading.accZ
                sensor_arr[t_to_i[t], c + 4] = reading.gyrX
                sensor_arr[t_to_i[t], c + 5] = reading.gyrY
                sensor_arr[t_to_i[t], c + 6] = reading.gyrZ
                sensor_arr[t_to_i[t], c + 7] = reading.magX
                sensor_arr[t_to_i[t], c + 8] = reading.magY
                sensor_arr[t_to_i[t], c + 9] = reading.magZ
                sensor_arr[t_to_i[t], c + 10] = reading.temp
            else:
                sensor_arr[t_to_i[t], c + 1] = reading

    # print(sensor_arr)
    return sensor_arr


def plot_time_series_data(ndarr):
    cols = [
        "time", "speed", "dist_r", "dist_f", "acc_x", "acc_y", "acc_z", "gyr_x",
        "gyr_y", "gyr_z", "mag_x", "mag_y", "mag_z", "temp"
    ]
    df = pd.DataFrame(ndarr, columns=cols)
    df.interpolate(method="linear").plot(x=cols[0], y=cols[1:], marker="x")
    plt.show()


sensor_arr = log_data()
print(sensor_arr)
plot_time_series_data(sensor_arr)